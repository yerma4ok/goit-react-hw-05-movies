{"version":3,"file":"static/js/696.e7317407.chunk.js","mappings":"8SACMA,EAAU,mCAEHC,EAAc,mCAAG,WAAMC,GAAN,+EACV,kDACZC,EAAU,CACdD,OAAQA,EACRE,OAAQ,CACNC,QAASL,IALe,SASLM,EAAAA,EAAAA,IARL,kDAQ0BH,GAThB,cAStBI,EATsB,gBAUfA,EAASC,KAVM,mFAAH,sDAadC,EAAe,mCAAG,WAAOC,EAAOR,GAAd,2HAEvBC,EAAU,CACdD,OAAQA,EACRE,OAAQ,CACNC,QAASL,EACTW,MAAOD,IANkB,SASNJ,EAAAA,EAAAA,IATM,4CASgBH,GAThB,cASvBI,EATuB,gBAUhBA,EAASC,KAVO,mFAAH,wDAafI,EAAO,mCAAG,WAAOC,EAAIC,GAAX,kFACfC,EADe,6CACsCF,GACrDV,EAAU,CACdD,OAAQY,EAAWZ,OACnBE,OAAQ,CACNC,QAASL,IALQ,SAQEM,EAAAA,EAAAA,IAAUS,EAAcZ,GAR1B,cAQfI,EARe,gBASRA,EAASC,KATD,mFAAH,wDAYPQ,EAAO,mCAAG,WAAOH,EAAIC,GAAX,kFACfG,EADe,6CACqCJ,EADrC,aAEfV,EAAU,CACdD,OAAQY,EAAWZ,OACnBE,OAAQ,CACNC,QAASL,IALQ,SAQEM,EAAAA,EAAAA,IAAUW,EAAad,GARzB,cAQfI,EARe,gBASRA,EAASC,KATD,mFAAH,wDAYPU,EAAU,mCAAG,WAAOL,EAAIC,GAAX,kFAClBK,EADkB,6CACqCN,EADrC,YAElBV,EAAU,CACdD,OAAQY,EAAWZ,OACnBE,OAAQ,CACNC,QAASL,IALW,SAQDM,EAAAA,EAAAA,IAAUa,EAAgBhB,GARzB,cAQlBI,EARkB,gBASXA,EAASC,KATE,mFAAH,uD,iKCnDVY,EAAYC,EAAAA,EAAAA,GAAH,qJASTC,EAAaD,EAAAA,EAAAA,GAAH,wGAOVE,EAAaF,EAAAA,EAAAA,IAAH,2DAKVG,EAAaH,EAAAA,EAAAA,GAAH,uIAQVI,EAAYJ,EAAAA,EAAAA,EAAH,wG,SCmCtB,EArDkB,WAChB,OAA4BK,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WACR,IAAMjB,EAAa,IAAIkB,gBAEjBC,EAAS,mCAAG,8GAESjB,EAAAA,EAAAA,IAAQa,EAASf,GAF1B,OAERP,EAFQ,OAGdqB,EAAUrB,EAAS2B,MAHL,gDAKdC,QAAQC,IAAR,MALc,yDAAH,qDAWf,OAFAH,IAEO,WACLnB,EAAWuB,OACZ,CACF,GAAE,CAACR,KAGF,iCACE,SAACT,EAAD,qBACCO,IACC,SAACL,EAAD,UACGK,EAAOW,KAAI,YAAqD,IAAlDzB,EAAiD,EAAjDA,GAAI0B,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC9C,OACE,0BACGF,GACC,SAAChB,EAAD,CACEmB,IAAG,UAnCH,mCAmCG,OAAmBH,GACtBI,IAAKH,KAGP,SAACjB,EAAD,CACEmB,IAAI,sCACJC,IAAI,MAGR,SAACnB,EAAD,UAAagB,KACb,SAACf,EAAD,UAAYgB,MAbL5B,EAgBZ,QAKV,C","sources":["api.js","components/MovieCast/MovieCast.styled.js","components/MovieCast/MovieCast.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '2f9097e7af7134119fcdce7363f2f155';\n\nexport const apiTrendMovies = async signal => {\n  const TREND_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n  const options = {\n    signal: signal,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const responce = await axios.get(TREND_URL, options);\n  return await responce.data;\n};\n\nexport const apiByNameMovies = async (movie, signal) => {\n  const SEARCH_URL = `https://api.themoviedb.org/3/search/movie`;\n  const options = {\n    signal: signal,\n    params: {\n      api_key: API_KEY,\n      query: movie,\n    },\n  };\n  const responce = await axios.get(SEARCH_URL, options);\n  return await responce.data;\n};\n\nexport const apiById = async (id, controller) => {\n  const SEARCH_BY_ID = `https://api.themoviedb.org/3/movie/${id}`;\n  const options = {\n    signal: controller.signal,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n  const responce = await axios.get(SEARCH_BY_ID, options);\n  return await responce.data;\n};\n\nexport const apiCast = async (id, controller) => {\n  const SEARCH_CAST = `https://api.themoviedb.org/3/movie/${id}/credits?`;\n  const options = {\n    signal: controller.signal,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n  const responce = await axios.get(SEARCH_CAST, options);\n  return await responce.data;\n};\n\nexport const apiReviews = async (id, controller) => {\n  const SEARCH_REVIEWS = `https://api.themoviedb.org/3/movie/${id}/reviews`;\n  const options = {\n    signal: controller.signal,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n  const responce = await axios.get(SEARCH_REVIEWS, options);\n  return await responce.data;\n};\n","import styled from '@emotion/styled';\n\nexport const CastTitle = styled.h2`\n  margin-top: 30px;\n  color: grey;\n  font-family: Roboto;\n  font-weight: 700;\n  font-size: 30px;\n  text-align: center;\n`;\n\nexport const ActorsList = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const ActorImage = styled.img`\n  width: 200px;\n  height: 300px;\n`;\n\nexport const ActorTitle = styled.h3`\n  font-weight: 700;\n  font-size: 16px;\n  color: black;\n  text-align: center;\n  text-transform: uppercase;\n`;\n\nexport const Character = styled.p`\n  font-weight: 500;\n  font-size: 16px;\n  color: grey;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { apiCast } from 'api';\nimport {\n  ActorImage,\n  ActorsList,\n  ActorTitle,\n  CastTitle,\n  Character,\n} from './MovieCast.styled';\n\nconst DEFAULT_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst MovieCast = () => {\n  const [actors, setActors] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const apiActors = async () => {\n      try {\n        const responce = await apiCast(movieId, controller);\n        setActors(responce.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    apiActors();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <CastTitle>ACTORS</CastTitle>\n      {actors && (\n        <ActorsList>\n          {actors.map(({ id, profile_path, original_name, character }) => {\n            return (\n              <li key={id}>\n                {profile_path ? (\n                  <ActorImage\n                    src={`${DEFAULT_URL}${profile_path}`}\n                    alt={original_name}\n                  />\n                ) : (\n                  <ActorImage\n                    src=\"https://via.placeholder.com/250x200\"\n                    alt=\"\"\n                  />\n                )}\n                <ActorTitle>{original_name}</ActorTitle>\n                <Character>{character}</Character>\n              </li>\n            );\n          })}\n        </ActorsList>\n      )}\n    </>\n  );\n};\n\nexport default MovieCast;\n"],"names":["API_KEY","apiTrendMovies","signal","options","params","api_key","axios","responce","data","apiByNameMovies","movie","query","apiById","id","controller","SEARCH_BY_ID","apiCast","SEARCH_CAST","apiReviews","SEARCH_REVIEWS","CastTitle","styled","ActorsList","ActorImage","ActorTitle","Character","useState","actors","setActors","movieId","useParams","useEffect","AbortController","apiActors","cast","console","log","abort","map","profile_path","original_name","character","src","alt"],"sourceRoot":""}